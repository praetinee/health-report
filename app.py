import numpy as np
import streamlit as st
import pandas as pd
import gspread
import json
import html
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")

# ==================== STYLE ====================
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap');
    html, body, [class*="css"] {
        font-family: 'Chakra Petch', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ==================== LOAD SHEET ====================
@st.cache_data(ttl=300)
def load_google_sheet():
    try:
        service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        client = gspread.authorize(creds)

        sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
        worksheet = client.open_by_url(sheet_url).sheet1
        raw_data = worksheet.get_all_records()
        if not raw_data:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á Google Sheet")
            st.stop()
        return pd.DataFrame(raw_data)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Google Sheet: {e}")
        st.stop()

df = load_google_sheet()
df.columns = df.columns.str.strip()
df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip()
df['HN'] = df['HN'].astype(str).str.strip()
df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip()

# ==================== YEAR MAPPING ====================
years = list(range(61, 69))
columns_by_year = {
    y: {
        "weight": f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{y}" if y != 68 else "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "height": f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{y}" if y != 68 else "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "waist": f"‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß{y}" if y != 68 else "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "sbp": f"SBP{y}" if y != 68 else "SBP",
        "dbp": f"DBP{y}" if y != 68 else "DBP",
        "pulse": f"pulse{y}" if y != 68 else "pulse",
    }
    for y in years
}

# ==================== INTERPRET FUNCTIONS ====================
def interpret_bmi(bmi):
    try:
        bmi = float(bmi)
        if bmi > 30:
            return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
        elif bmi >= 25:
            return "‡∏≠‡πâ‡∏ß‡∏ô"
        elif bmi >= 23:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
        elif bmi >= 18.5:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏ú‡∏≠‡∏°"
    except (ValueError, TypeError):
        return "-"

def interpret_bp(sbp, dbp):
    try:
        sbp = float(sbp)
        dbp = float(dbp)
        if sbp == 0 or dbp == 0:
            return "-"
        if sbp >= 160 or dbp >= 100:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
        elif sbp >= 140 or dbp >= 90:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif sbp < 120 and dbp < 80:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
    except (ValueError, TypeError):
        return "-"

def combined_health_advice(bmi, sbp, dbp):
    try:
        bmi = float(bmi)
    except:
        bmi = None
    try:
        sbp = float(sbp)
        dbp = float(dbp)
    except:
        sbp = dbp = None

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BMI
    if bmi is None:
        bmi_text = ""
    elif bmi > 30:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
    elif bmi >= 25:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
    elif bmi < 18.5:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
    else:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô
    if sbp is None or dbp is None:
        bp_text = ""
    elif sbp >= 160 or dbp >= 100:
        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
    elif sbp >= 140 or dbp >= 90:
        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
    elif sbp >= 120 or dbp >= 80:
        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
    else:
        bp_text = ""  # ‚ùó ‡∏ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ = ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏ß‡∏°
    if not bmi_text and not bp_text:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"

    if "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"

    if not bmi_text and bp_text:
        return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"

    if bmi_text and bp_text:
        return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"

    return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

# ==================== UI FORM ====================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

if submitted:
    query = df.copy()
    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        query = query[query["HN"] == hn.strip()]
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]
    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.session_state.pop("person", None)
    else:
        st.session_state["person"] = query.iloc[0]

# ==================== DISPLAY ====================
if "person" in st.session_state:
    person = st.session_state["person"]

    selected_year = st.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", 
        options=sorted(years, reverse=True),
        format_func=lambda y: f"‡∏û.‡∏®. {y + 2500}"
    )
    selected_cols = columns_by_year[selected_year]

    def render_health_report(person, year_cols):
        sbp = person.get(year_cols["sbp"], "")
        dbp = person.get(year_cols["dbp"], "")
        pulse = person.get(year_cols["pulse"], "-")
        weight = person.get(year_cols["weight"], "-")
        height = person.get(year_cols["height"], "-")
        waist = person.get(year_cols["waist"], "-")

        bp_result = "-"
        if sbp and dbp:
            bp_val = f"{sbp}/{dbp} ‡∏°.‡∏°.‡∏õ‡∏£‡∏≠‡∏ó"
            bp_desc = interpret_bp(sbp, dbp)
            bp_result = f"{bp_val} - {bp_desc}"

        pulse = f"{pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" if pulse != "-" else "-"
        weight = f"{weight} ‡∏Å‡∏Å." if weight else "-"
        height = f"{height} ‡∏ã‡∏°." if height else "-"
        waist = f"{waist} ‡∏ã‡∏°." if waist else "-"

        try:
            bmi_val = float(weight.replace(" ‡∏Å‡∏Å.", "")) / ((float(height.replace(" ‡∏ã‡∏°.", "")) / 100) ** 2)
        except:
            bmi_val = None

        summary_advice = html.escape(combined_health_advice(bmi_val, sbp, dbp))

        return f"""
        <div style='
            max-width: 100%;
            background-color: #ffffff;
            padding: 36px;
            border-radius: 8px;
            border: 1px solid #ddd;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
            font-size: 18px;
            line-height: 1.8;
            color: black;
        '>
            <div style='text-align: center; font-size: 22px; font-weight: bold;'>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</div>
            <div style='text-align: center;'>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à: {person.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à', '-')}</div>
            <div style='text-align: center; margin-top: 10px;'>
                ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ 201 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 11 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≤‡∏ß<br>
                ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50290 ‡πÇ‡∏ó‡∏£ 053 921 199 ‡∏ï‡πà‡∏≠ 167
            </div>
            <hr style='margin: 24px 0;'>
            <div style='
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 32px;
                margin-bottom: 20px;
                text-align: center;
            '>
                <div><b>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</b> {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}</div>
                <div><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {person.get('‡∏≠‡∏≤‡∏¢‡∏∏', '-')} ‡∏õ‡∏µ</div>
                <div><b>‡πÄ‡∏û‡∏®:</b> {person.get('‡πÄ‡∏û‡∏®', '-')}</div>
                <div><b>HN:</b> {person.get('HN', '-')}</div>
                <div><b>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:</b> {person.get('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', '-')}</div>
            </div>
            <div style='
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 32px;
                margin-bottom: 16px;
                text-align: center;
            '>
                <div><b>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</b> {weight}</div>
                <div><b>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</b> {height}</div>
                <div><b>‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:</b> {waist}</div>
                <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:</b> {bp_result}</div>
                <div><b>‡∏ä‡∏µ‡∏û‡∏à‡∏£:</b> {pulse}</div>
            </div>
            <div style='margin-top: 16px; text-align: center;'>
                <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {summary_advice}
            </div>
        </div>
        """

    st.markdown(render_health_report(person, selected_cols), unsafe_allow_html=True)

    # ==================== TABLE ====================
    st.markdown("### üìä ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å / ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß / ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô")
    table_data = {
        "‡∏õ‡∏µ ‡∏û.‡∏®.": [],
        "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)": [],
        "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)": [],
        "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)": [],
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)": [],
        "BMI (‡πÅ‡∏õ‡∏•‡∏ú‡∏•)": [],
    }

    for y in years:
        col = columns_by_year[y]
        w, h, waist, sbp, dbp = [person.get(col[k], "") for k in ["weight", "height", "waist", "sbp", "dbp"]]

        try:
            bmi = round(float(w) / ((float(h) / 100) ** 2), 1)
            bmi_str = f"{bmi}<br><span style='font-size: 13px; color: gray;'>{interpret_bmi(bmi)}</span>"
        except (ValueError, TypeError, ZeroDivisionError):
            bmi_str = "-"

        try:
            if sbp or dbp:
                bp_str = f"{sbp}/{dbp}<br><span style='font-size: 13px; color: gray;'>{interpret_bp(sbp, dbp)}</span>"
            else:
                bp_str = "-"
        except (ValueError, TypeError):
            bp_str = "-"

        table_data["‡∏õ‡∏µ ‡∏û.‡∏®."].append(y + 2500)
        table_data["‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)"].append(w or "-")
        table_data["‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)"].append(h or "-")
        table_data["‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß (‡∏ã‡∏°.)"].append(waist or "-")
        table_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (mmHg)"].append(bp_str)
        table_data["BMI (‡πÅ‡∏õ‡∏•‡∏ú‡∏•)"].append(bmi_str)

    html_table = pd.DataFrame(table_data).set_index("‡∏õ‡∏µ ‡∏û.‡∏®.").T.to_html(escape=False)
    st.markdown(html_table, unsafe_allow_html=True)

    # ================== CBC / BLOOD TEST DISPLAY ==================
    st.markdown("### üß™ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î")
    
    cbc_data = {
        "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à": [
            "‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô (Hb)", "‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ó‡∏Ñ‡∏£‡∏¥‡∏ï (Hct)", "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß (wbc)", "‡∏ô‡∏¥‡∏ß‡πÇ‡∏ó‡∏£‡∏ü‡∏¥‡∏• (Neutrophil)",
            "‡∏•‡∏¥‡∏°‡πÇ‡∏ü‡πÑ‡∏ã‡∏ï‡πå (Lymphocyte)", "‡πÇ‡∏°‡πÇ‡∏ô‡πÑ‡∏ã‡∏ï‡πå (Monocyte)", "‡∏≠‡∏µ‡πÇ‡∏≠‡∏ã‡∏¥‡πÇ‡∏ô‡∏ü‡∏¥‡∏• (Eosinophil)",
            "‡πÄ‡∏ö‡πÇ‡∏ã‡∏ü‡∏¥‡∏• (Basophil)", "‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Platelet)"
        ],
        "‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à": [person.get("Hb"), person.get("Hct"), person.get("WBC"), person.get("Neutrophil"),
                  person.get("Lymphocyte"), person.get("Monocyte"), person.get("Eosinophil"),
                  person.get("Basophil"), person.get("Plt")],
        "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥": [
            "‡∏ä‡∏≤‡∏¢ > 13, ‡∏´‡∏ç‡∏¥‡∏á >12 g/dl", "‡∏ä‡∏≤‡∏¢ > 39%, ‡∏´‡∏ç‡∏¥‡∏á >36%", "4,000-10,000 /cu.mm", "45-70%",
            "20-45%", "3-9%", "0-5%", "0-3%", "150,000-500,000 /cu.mm"
        ]
    }
    
    blood_data = {
        "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à": [
            "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (FBS)", "‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏£‡∏¥‡∏Å (Uric acid)", "ALK.POS", "SGOT", "SGPT",
            "Cholesterol", "Triglyceride", "HDL", "LDL", "BUN", "Creatinine (Cr)", "GFR"
        ],
        "‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à": [person.get("FBS"), person.get("Uric"), person.get("ALK"), person.get("SGOT"),
                  person.get("SGPT"), person.get("Cholesterol"), person.get("TG"), person.get("HDL"),
                  person.get("LDL"), person.get("BUN"), person.get("Cr"), person.get("GFR")],
        "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥": [
            "75‚Äì106 mg/dl", "2.6‚Äì7.2 mg%", "30‚Äì120 U/L", "< 37 U/L", "< 45 U/L",
            "150‚Äì200 mg/dl", "35‚Äì150 mg/dl", "> 40 mg/dl", "0‚Äì130 mg/dl",
            "7.5‚Äì20 mg/dl", "0.5‚Äì1.7 mg/dl", "> 60 mL/min"
        ]
    }
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ü©∏ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Complete Blood Count)")
        df_cbc = pd.DataFrame(cbc_data)
        st.dataframe(df_cbc, use_container_width=True)
    
    with col2:
        st.markdown("#### üíâ ‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Blood Test)")
        df_bt = pd.DataFrame(blood_data)
        st.dataframe(df_bt, use_container_width=True)
    
    # ================== CBC ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ==================
    hb_result = person.get("‡∏ú‡∏•_Hb", "")
    wbc_result = person.get("‡∏ú‡∏•_WBC", "")
    plt_result = person.get("‡∏ú‡∏•_Plt", "")
    
    cbc_summary = cbc_advice(hb_result, wbc_result, plt_result)
    if cbc_summary and cbc_summary != "-":
        st.markdown(f"**üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏ú‡∏• CBC:** {cbc_summary}")
