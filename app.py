import numpy as np
import streamlit as st
import pandas as pd
import gspread
import json
import html
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")

# ==================== STYLE ====================
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap');
    html, body, [class*="css"] {
        font-family: 'Chakra Petch', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ==================== LOAD SHEET ====================
@st.cache_data(ttl=300)
def load_google_sheet():
    try:
        service_account_info = json.loads(st.secrets["GCP_SERVICE_ACCOUNT"])
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        client = gspread.authorize(creds)

        sheet_url = "https://docs.google.com/spreadsheets/d/1N3l0o_Y6QYbGKx22323mNLPym77N0jkJfyxXFM2BDmc"
        worksheet = client.open_by_url(sheet_url).sheet1
        raw_data = worksheet.get_all_records()
        if not raw_data:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á Google Sheet")
            st.stop()
        return pd.DataFrame(raw_data)
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Google Sheet: {e}")
        st.stop()

df = load_google_sheet()
df.columns = df.columns.str.strip()
df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip()
df['HN'] = df['HN'].astype(str).str.strip()
df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip()

# ==================== YEAR MAPPING ====================
years = list(range(61, 69))
columns_by_year = {
    y: {
        "weight": f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{y}" if y != 68 else "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "height": f"‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á{y}" if y != 68 else "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "waist": f"‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß{y}" if y != 68 else "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "sbp": f"SBP{y}" if y != 68 else "SBP",
        "dbp": f"DBP{y}" if y != 68 else "DBP",
        "pulse": f"pulse{y}" if y != 68 else "pulse",
    }
    for y in years
}

# ==================== INTERPRET FUNCTIONS ====================
def interpret_bmi(bmi):
    try:
        bmi = float(bmi)
        if bmi > 30:
            return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
        elif bmi >= 25:
            return "‡∏≠‡πâ‡∏ß‡∏ô"
        elif bmi >= 23:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
        elif bmi >= 18.5:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏ú‡∏≠‡∏°"
    except (ValueError, TypeError):
        return "-"

def interpret_bp(sbp, dbp):
    try:
        sbp = float(sbp)
        dbp = float(dbp)
        if sbp == 0 or dbp == 0:
            return "-"
        if sbp >= 160 or dbp >= 100:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
        elif sbp >= 140 or dbp >= 90:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        elif sbp < 120 and dbp < 80:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
    except (ValueError, TypeError):
        return "-"

def combined_health_advice(bmi, sbp, dbp):
    try:
        bmi = float(bmi)
    except:
        bmi = None
    try:
        sbp = float(sbp)
        dbp = float(dbp)
    except:
        sbp = dbp = None

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BMI
    if bmi is None:
        bmi_text = ""
    elif bmi > 30:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
    elif bmi >= 25:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
    elif bmi < 18.5:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
    else:
        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô
    if sbp is None or dbp is None:
        bp_text = ""
    elif sbp >= 160 or dbp >= 100:
        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
    elif sbp >= 140 or dbp >= 90:
        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
    elif sbp >= 120 or dbp >= 80:
        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
    else:
        bp_text = ""  # ‚ùó ‡∏ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ = ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏ß‡∏°
    if not bmi_text and not bp_text:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"

    if "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
        return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"

    if not bmi_text and bp_text:
        return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"

    if bmi_text and bp_text:
        return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"

    return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

# ==================== UI FORM ====================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

# ==================== BLOOD COLUMN MAPPING ====================
blood_columns_by_year = {
    y: {
        "FBS": f"FBS{y}",
        "Uric": f"Uric Acid{y}",
        "ALK": f"ALP{y}",
        "SGOT": f"SGOT{y}",
        "SGPT": f"SGPT{y}",
        "Cholesterol": f"CHOL{y}",
        "TG": f"TGL{y}",
        "HDL": f"HDL{y}",
        "LDL": f"LDL{y}",
        "BUN": f"BUN{y}",
        "Cr": f"Cr{y}",
        "GFR": f"GFR{y}",
    }
    for y in years
}

if submitted:
    query = df.copy()
    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        query = query[query["HN"] == hn.strip()]
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]
    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.session_state.pop("person", None)
    else:
        st.session_state["person"] = query.iloc[0]

from collections import defaultdict

cbc_columns_by_year = defaultdict(dict)

for year in range(61, 69):
    cbc_columns_by_year[year] = {
        "hb": f"Hb(%)" + str(year),
        "hct": f"HCT" + str(year),
        "wbc": f"WBC (cumm)" + str(year),
        "plt": f"Plt (/mm)" + str(year),
    }

    if year == 68:
        cbc_columns_by_year[year].update({
            "ne": "Ne (%)68",
            "ly": "Ly (%)68",
            "eo": "Eo68",
            "mo": "M68",
            "ba": "BA68",
            "rbc": "RBCmo68",
            "mcv": "MCV68",
            "mch": "MCH68",
            "mchc": "MCHC",
        })

# ==================== DISPLAY ====================
if "person" in st.session_state:
    person = st.session_state["person"]

    selected_year = st.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", 
        options=sorted(years, reverse=True),
        format_func=lambda y: f"‡∏û.‡∏®. {y + 2500}"
    )
    selected_cols = columns_by_year[selected_year]

    def render_health_report(person, year_cols):
        sbp = person.get(year_cols["sbp"], "")
        dbp = person.get(year_cols["dbp"], "")
        pulse = person.get(year_cols["pulse"], "-")
        weight = person.get(year_cols["weight"], "-")
        height = person.get(year_cols["height"], "-")
        waist = person.get(year_cols["waist"], "-")
    
        bp_result = "-"
        if sbp and dbp:
            bp_val = f"{sbp}/{dbp} ‡∏°.‡∏°.‡∏õ‡∏£‡∏≠‡∏ó"
            bp_desc = interpret_bp(sbp, dbp)
            bp_result = f"{bp_val} - {bp_desc}"
    
        pulse = f"{pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" if pulse != "-" else "-"
        weight = f"{weight} ‡∏Å‡∏Å." if weight else "-"
        height = f"{height} ‡∏ã‡∏°." if height else "-"
        waist = f"{waist} ‡∏ã‡∏°." if waist else "-"
    
        try:
            weight_val = float(weight.replace(" ‡∏Å‡∏Å.", "").strip())
            height_val = float(height.replace(" ‡∏ã‡∏°.", "").strip())
            bmi_val = weight_val / ((height_val / 100) ** 2)
        except Exception as e:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡πÑ‡∏î‡πâ: {e}")
            bmi_val = None
    
        summary_advice = html.escape(combined_health_advice(bmi_val, sbp, dbp))
    
        return f"""
        <div style="font-size: 18px; line-height: 1.8; color: inherit; padding: 24px 8px;">
            <div style="text-align: center; font-size: 22px; font-weight: bold;">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</div>
            <div style="text-align: center;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à: {person.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à', '-')}</div>
            <div style="text-align: center; margin-top: 10px;">
                ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ 201 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 11 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≤‡∏ß<br>
                ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50290 ‡πÇ‡∏ó‡∏£ 053 921 199 ‡∏ï‡πà‡∏≠ 167
            </div>
            <hr style="margin: 24px 0;">
            <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 20px; text-align: center;">
                <div><b>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</b> {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}</div>
                <div><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {person.get('‡∏≠‡∏≤‡∏¢‡∏∏', '-')} ‡∏õ‡∏µ</div>
                <div><b>‡πÄ‡∏û‡∏®:</b> {person.get('‡πÄ‡∏û‡∏®', '-')}</div>
                <div><b>HN:</b> {person.get('HN', '-')}</div>
                <div><b>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:</b> {person.get('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', '-')}</div>
            </div>
            <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 16px; text-align: center;">
                <div><b>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</b> {weight}</div>
                <div><b>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</b> {height}</div>
                <div><b>‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:</b> {waist}</div>
                <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:</b> {bp_result}</div>
                <div><b>‡∏ä‡∏µ‡∏û‡∏à‡∏£:</b> {pulse}</div>
            </div>
            <div style="margin-top: 16px; text-align: center;">
                <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {summary_advice}
            </div>
        </div>
        """

    st.markdown(render_health_report(person, selected_cols), unsafe_allow_html=True)

    # ================== CBC / BLOOD TEST DISPLAY ==================
    st.markdown("### üß™ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î")
    
    cbc_cols = cbc_columns_by_year[selected_year]
    blood_cols = blood_columns_by_year[selected_year]
    
    # ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡∏∞ flag ‡∏ß‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    def flag_value(raw, low=None, high=None, higher_is_better=False):
        try:
            val = float(str(raw).replace(",", "").strip())
            if higher_is_better:
                return f"{val:.1f}", val < low
            if (low is not None and val < low) or (high is not None and val > high):
                return f"{val:.1f}", True
            return f"{val:.1f}", False
        except:
            return "-", False
    
    # ‚úÖ CBC config
    sex = person.get("‡πÄ‡∏û‡∏®", "").strip()
    hb_low = 12 if sex == "‡∏´‡∏ç‡∏¥‡∏á" else 13
    hct_low = 36 if sex == "‡∏´‡∏ç‡∏¥‡∏á" else 39
    
    cbc_config = [
        ("‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô (Hb)", cbc_cols.get("hb"), "‡∏ä‡∏≤‡∏¢ > 13, ‡∏´‡∏ç‡∏¥‡∏á > 12 g/dl", hb_low, None),
        ("‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ó‡∏Ñ‡∏£‡∏¥‡∏ï (Hct)", cbc_cols.get("hct"), "‡∏ä‡∏≤‡∏¢ > 39%, ‡∏´‡∏ç‡∏¥‡∏á > 36%", hct_low, None),
        ("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß (wbc)", cbc_cols.get("wbc"), "4,000 - 10,000 /cu.mm", 4000, 10000),
        ("‡∏ô‡∏¥‡∏ß‡πÇ‡∏ó‡∏£‡∏ü‡∏¥‡∏• (Neutrophil)", cbc_cols.get("ne"), "43 - 70%", 43, 70),
        ("‡∏•‡∏¥‡∏°‡πÇ‡∏ü‡πÑ‡∏ã‡∏ï‡πå (Lymphocyte)", cbc_cols.get("ly"), "20 - 44%", 20, 44),
        ("‡πÇ‡∏°‡πÇ‡∏ô‡πÑ‡∏ã‡∏ï‡πå (Monocyte)", cbc_cols.get("mo"), "3 - 9%", 3, 9),
        ("‡∏≠‡∏µ‡πÇ‡∏≠‡∏ã‡∏¥‡πÇ‡∏ô‡∏ü‡∏¥‡∏• (Eosinophil)", cbc_cols.get("eo"), "0 - 9%", 0, 9),
        ("‡πÄ‡∏ö‡πÇ‡∏ã‡∏ü‡∏¥‡∏• (Basophil)", cbc_cols.get("ba"), "0 - 3%", 0, 3),
        ("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Platelet)", cbc_cols.get("plt"), "150,000 - 500,000 /cu.mm", 150000, 500000),
    ]
    
    cbc_rows = []
    for name, col, normal, low, high in cbc_config:
        raw = person.get(col, "-")
        result, is_abnormal = flag_value(raw, low, high)
        cbc_rows.append([(name, is_abnormal), (result, is_abnormal), (normal, is_abnormal)])
    
    # ‚úÖ BLOOD config
    blood_config = [
        ("‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (FBS)", blood_cols["FBS"], "74 - 106 mg/dl", 74, 106),
        ("‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏£‡∏¥‡∏Å (Uric Acid)", blood_cols["Uric"], "2.6 - 7.2 mg%", 2.6, 7.2),
        ("ALK.POS", blood_cols["ALK"], "30 - 120 U/L", 30, 120),
        ("SGOT", blood_cols["SGOT"], "&lt; 37 U/L", None, 37),
        ("SGPT", blood_cols["SGPT"], "&lt; 41 U/L", None, 41),
        ("Cholesterol", blood_cols["Cholesterol"], "150 - 200 mg/dl", 150, 200),
        ("Triglyceride", blood_cols["TG"], "35 - 150 mg/dl", 35, 150),
        ("HDL", blood_cols["HDL"], "&gt; 40 mg/dl", 40, None, True),
        ("LDL", blood_cols["LDL"], "0 - 160 mg/dl", 0, 160),
        ("BUN", blood_cols["BUN"], "7.9 - 20 mg/dl", 7.9, 20),
        ("Creatinine (Cr)", blood_cols["Cr"], "0.5 - 1.17 mg/dl", 0.5, 1.17),
        ("GFR", blood_cols["GFR"], "&gt; 60 mL/min", 60, None, True),
    ]
    
    blood_rows = []
    for name, col, normal, low, high, *opt in blood_config:
        higher_is_better = opt[0] if opt else False
        raw = person.get(col, "-")
        result, is_abnormal = flag_value(raw, low, high, higher_is_better=higher_is_better)
        blood_rows.append([(name, is_abnormal), (result, is_abnormal), (normal, is_abnormal)])
    
    # ‚úÖ Styled table renderer
    def styled_result_table(headers, rows):
        header_html = "".join([f"<th>{h}</th>" for h in headers])
        html = f"""
        <style>
            .styled-result td {{
                padding: 6px 12px;
                vertical-align: middle;
            }}
            .styled-result th {{
                background-color: #111;
                color: white;
                padding: 6px 12px;
            }}
            .abn {{
                background-color: rgba(255, 0, 0, 0.15);
            }}
        </style>
        <table class='styled-result'>
            <thead><tr>{header_html}</tr></thead>
            <tbody>
        """
        for row in rows:
            row_html = ""
            for cell, is_abn in row:
                css = " class='abn'" if is_abn else ""
                row_html += f"<td{css}>{cell}</td>"
            html += f"<tr>{row_html}</tr>"
        html += "</tbody></table>"
        return html
    
    # ‚úÖ Render ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ü©∏ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (CBC)")
        st.markdown(styled_result_table(["‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"], cbc_rows), unsafe_allow_html=True)
    
    with col2:
        st.markdown("#### üíâ ‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Blood Test)")
        st.markdown(styled_result_table(["‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"], blood_rows), unsafe_allow_html=True)

    import re
    
    # üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    def merge_similar_sentences(messages):
        if len(messages) == 1:
            return messages[0]
    
        merged = []
        seen_prefixes = {}
    
        for msg in messages:
            prefix = re.match(r"^(‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤(?:‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°)?(?:[^,]*)?)", msg)
            if prefix:
                key = "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤"
                rest = msg[len(prefix.group(1)):].strip()
                phrase = prefix.group(1)[len(key):].strip()
    
                # üîß ‡∏£‡∏ß‡∏° phrase ‡πÅ‡∏•‡∏∞ rest ‚Üí ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö "‡πÅ‡∏•‡∏∞" ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô
                full_detail = f"{phrase} {rest}".strip()
                full_detail = re.sub(r"^‡πÅ‡∏•‡∏∞\s+", "", full_detail)
    
                if key in seen_prefixes:
                    seen_prefixes[key].append(full_detail)
                else:
                    seen_prefixes[key] = [full_detail]
            else:
                merged.append(msg)
    
        for key, endings in seen_prefixes.items():
            endings = [e.strip() for e in endings if e]
            if endings:
                if len(endings) == 1:
                    merged.append(f"{key} {endings[0]}")
                else:
                    body = " ".join(endings[:-1]) + " ‡πÅ‡∏•‡∏∞ " + endings[-1]
                    merged.append(f"{key} {body}")
            else:
                merged.append(key)
    
        return "<br>".join(merged)
    
    cbc_messages = {
        2:  "‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠",
        4:  "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡πà‡∏≥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
        6:  "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á",
        8:  "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î",
        9:  "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥",
        10: "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤",
        13: "‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î",
    }
    
    def interpret_wbc(wbc):
        try:
            wbc = float(wbc)
            if wbc == 0:
                return "-"
            elif 4000 <= wbc <= 10000:
                return "‡∏õ‡∏Å‡∏ï‡∏¥"
            elif 10000 < wbc < 13000:
                return "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif wbc >= 13000:
                return "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
            elif 3000 < wbc < 4000:
                return "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif wbc <= 3000:
                return "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
        except:
            return "-"
        return "-"
    
    def interpret_hb(hb, sex):
        try:
            hb = float(hb)
            if sex == "‡∏ä‡∏≤‡∏¢":
                if hb < 12:
                    return "‡∏û‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á"
                elif 12 <= hb < 13:
                    return "‡∏û‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
                else:
                    return "‡∏õ‡∏Å‡∏ï‡∏¥"
            elif sex == "‡∏´‡∏ç‡∏¥‡∏á":
                if hb < 11:
                    return "‡∏û‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á"
                elif 11 <= hb < 12:
                    return "‡∏û‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
                else:
                    return "‡∏õ‡∏Å‡∏ï‡∏¥"
        except:
            return "-"
        return "-"
    
    def interpret_plt(plt):
        try:
            plt = float(plt)
            if plt == 0:
                return "-"
            elif 150000 <= plt <= 500000:
                return "‡∏õ‡∏Å‡∏ï‡∏¥"
            elif 500000 < plt < 600000:
                return "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif plt >= 600000:
                return "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
            elif 100000 <= plt < 150000:
                return "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif plt < 100000:
                return "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"
        except:
            return "-"
        return "-"
    
    def cbc_advice(hb_result, wbc_result, plt_result):
        message_ids = []
    
        if all(x in ["", "-", None] for x in [hb_result, wbc_result, plt_result]):
            return "-"
    
        if hb_result == "‡∏û‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á":
            if wbc_result == "‡∏õ‡∏Å‡∏ï‡∏¥" and plt_result == "‡∏õ‡∏Å‡∏ï‡∏¥":
                message_ids.append(8)
            elif wbc_result in ["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"]:
                message_ids.append(9)
        elif hb_result == "‡∏û‡∏ö‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
            if wbc_result == "‡∏õ‡∏Å‡∏ï‡∏¥" and plt_result == "‡∏õ‡∏Å‡∏ï‡∏¥":
                message_ids.append(2)
            elif wbc_result in ["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"]:
                message_ids.append(13)
    
        if wbc_result in ["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå"] and hb_result == "‡∏õ‡∏Å‡∏ï‡∏¥":
            message_ids.append(6)
    
        if plt_result == "‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå":
            message_ids.append(10)
        elif plt_result in ["‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"]:
            message_ids.append(4)
    
        if not message_ids and hb_result == "‡∏õ‡∏Å‡∏ï‡∏¥" and wbc_result == "‡∏õ‡∏Å‡∏ï‡∏¥" and plt_result == "‡∏õ‡∏Å‡∏ï‡∏¥":
            return ""
    
        if not message_ids:
            return "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
    
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ id
        raw_msgs = [cbc_messages[i] for i in sorted(set(message_ids))]
        return merge_similar_sentences(raw_msgs)
    
    # üîß ‡∏¢‡∏∂‡∏î‡∏õ‡∏µ‡∏à‡∏≤‡∏Å selectbox
    suffix = str(selected_year)
    sex = person.get("‡πÄ‡∏û‡∏®", "").strip()
    
    # üîç ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    hb_raw = str(person.get(f"Hb(%)" + suffix, "")).strip()
    wbc_raw = str(person.get(f"WBC (cumm)" + suffix, "")).strip()
    plt_raw = str(person.get(f"Plt (/mm)" + suffix, "")).strip()
    
    # üß† ‡πÅ‡∏õ‡∏•‡∏ú‡∏•
    hb_result = interpret_hb(hb_raw, sex)
    wbc_result = interpret_wbc(wbc_raw)
    plt_result = interpret_plt(plt_raw)
    
    # ü©∫ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    recommendation = cbc_advice(hb_result, wbc_result, plt_result)
    
    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if recommendation and not all(x == "-" for x in [hb_result, wbc_result, plt_result]):
        st.markdown(f"""
        <div style='
            background-color: rgba(255, 105, 135, 0.15);
            padding: 1rem;
            border-radius: 6px;
            color: white;
            margin-top: 1rem;
        '>
            <div style='font-size: 18px; font-weight: bold;'>üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏î (CBC) ‡∏õ‡∏µ {2500 + selected_year}</div>
            <div style='font-size: 16px; margin-top: 0.3rem;'>{recommendation}</div>
        </div>
        """, unsafe_allow_html=True)

    # ===============================
    # üìå HEALTH SUMMARY & ADVICE DISPLAY
    # ===============================
    
    import streamlit as st
    import pandas as pd
    import re
    
    # ===== ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô app.py) =====
    # selected_year = st.selectbox(...)
    
    y = selected_year
    y_label = "" if y == 2568 else str(y % 100)
    
    # -------------------------------
    # üß† Merge Similar Sentence Helper
    # -------------------------------
    def merge_similar_sentences(messages):
        if len(messages) == 1:
            return "‚Ä¢ " + messages[0]
    
        merged = []
        seen_prefixes = {}
    
        for msg in messages:
            prefix = re.match(r"^(‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤(?:‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°)?(?:[^,]*)?)", msg)
            if prefix:
                key = "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤"
                rest = msg[len(prefix.group(1)):].strip()
                phrase = prefix.group(1)[len(key):].strip()
                full_detail = f"{phrase} {rest}".strip()
                full_detail = re.sub(r"^‡πÅ‡∏•‡∏∞\s+", "", full_detail)
    
                if key in seen_prefixes:
                    seen_prefixes[key].append(full_detail)
                else:
                    seen_prefixes[key] = [full_detail]
            else:
                merged.append(msg)
    
        for key, endings in seen_prefixes.items():
            endings = [e.strip() for e in endings if e]
            if endings:
                if len(endings) == 1:
                    merged.append(f"{key} {endings[0]}")
                else:
                    body = " ".join(endings[:-1]) + " ‡πÅ‡∏•‡∏∞ " + endings[-1]
                    merged.append(f"{key} {body}")
            else:
                merged.append(key)
    
        return "<br>‚Ä¢ " + "<br>‚Ä¢ ".join(merged)
    
    # -------------------------------
    # ü©∏ CBC Summary (‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ cbc_result ‡πÅ‡∏•‡πâ‡∏ß)
    # -------------------------------
    advice_messages = []
    if cbc_result:
        advice_messages.append(cbc_result)
    
    # -------------------------------
    # üß™ Liver Function
    # -------------------------------
    def summarize_liver(alp_val, sgot_val, sgpt_val):
        try:
            alp = float(alp_val)
            sgot = float(sgot_val)
            sgpt = float(sgpt_val)
            if alp == 0 or sgot == 0 or sgpt == 0:
                return "-"
            if alp > 120 or sgot > 36 or sgpt > 40:
                return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏ã‡πâ‡∏≥"
            return ""
        except:
            return "-"
    
    alp_raw = str(person.get(f"ALP{y_label}", "") or "").strip()
    sgot_raw = str(person.get(f"SGOT{y_label}", "") or "").strip()
    sgpt_raw = str(person.get(f"SGPT{y_label}", "") or "").strip()
    
    liver_advice = summarize_liver(alp_raw, sgot_raw, sgpt_raw)
    if liver_advice and liver_advice != "-":
        advice_messages.append(liver_advice)
    
    # -------------------------------
    # üß¨ Kidney Function
    # -------------------------------
    def summarize_kidney(bun, cr, gfr):
        try:
            bun = float(bun)
            cr = float(cr)
            gfr = float(gfr)
            if bun < 5 or bun > 20 or cr < 0.6 or cr > 1.2 or gfr < 60:
                return "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï"
            return ""
        except:
            return "-"
    
    bun_raw = str(person.get(f"BUN{y_label}", "") or "").strip()
    cr_raw = str(person.get(f"Cr{y_label}", "") or "").strip()
    gfr_raw = str(person.get(f"GFR{y_label}", "") or "").strip()
    
    kidney_advice = summarize_kidney(bun_raw, cr_raw, gfr_raw)
    if kidney_advice and kidney_advice != "-":
        advice_messages.append(kidney_advice)
    
    # -------------------------------
    # üç¨ FBS (‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î)
    # -------------------------------
    def summarize_fbs(fbs_raw):
        try:
            val = float(fbs_raw)
            if 100 <= val < 106:
                return "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô"
            elif 106 <= val < 126:
                return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ã‡πâ‡∏≥"
            elif val >= 126:
                return "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"
            else:
                return ""
        except:
            return "-"
    
    fbs_raw = str(person.get("FBS" if y == 2568 else f"FBS{y_label}", "") or "").strip()
    fbs_advice = summarize_fbs(fbs_raw)
    if fbs_advice and fbs_advice != "-":
        advice_messages.append(fbs_advice)
    
    # -------------------------------
    # üß™ Blood Lipids
    # -------------------------------
    def summarize_lipids(chol_raw, tgl_raw, ldl_raw):
        try:
            chol = float(chol_raw)
            tgl = float(tgl_raw)
            ldl = float(ldl_raw)
            if chol == 0 and tgl == 0:
                return "-"
            if chol >= 250 or tgl >= 250 or ldl >= 180:
                return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î"
            elif chol <= 200 and tgl <= 150:
                return ""
            else:
                return "‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î"
        except:
            return "-"
    
    chol_raw = str(person.get(f"CHOL{y_label}", "") or "").strip()
    tgl_raw = str(person.get(f"TGL{y_label}", "") or "").strip()
    ldl_raw = str(person.get(f"LDL{y_label}", "") or "").strip()
    
    lipid_advice = summarize_lipids(chol_raw, tgl_raw, ldl_raw)
    if lipid_advice and lipid_advice != "-":
        advice_messages.append(lipid_advice)
    
    # -------------------------------
    # ‚úÖ SHOW COMBINED ADVICE
    # -------------------------------
    final_advice = merge_similar_sentences(advice_messages)
    
    if final_advice.strip() and final_advice.strip() != "-":
        st.markdown(f"""
        <div style='
            background-color: rgba(255, 105, 135, 0.15);
            padding: 1.5rem;
            border-radius: 8px;
            color: white;
            margin-top: 2rem;
        '>
            <div style='font-size: 20px; font-weight: bold;'>üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏õ‡∏µ {selected_year}</div>
            <div style='font-size: 16px; margin-top: 0.8rem;'>{final_advice}</div>
        </div>
        """, unsafe_allow_html=True)
    
